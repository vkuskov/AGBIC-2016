//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {
    public partial class Entity {
        public SeshFT.Gameplay.GameplayCameraStateComponent gameplayCameraState { get { return (SeshFT.Gameplay.GameplayCameraStateComponent)GetComponent(CoreComponentIds.GameplayCameraState); } }

        public bool hasGameplayCameraState { get { return HasComponent(CoreComponentIds.GameplayCameraState); } }

        public Entity AddGameplayCameraState(float newTargetSpeed, float newCurrentZoom) {
            var component = CreateComponent<SeshFT.Gameplay.GameplayCameraStateComponent>(CoreComponentIds.GameplayCameraState);
            component.targetSpeed = newTargetSpeed;
            component.currentZoom = newCurrentZoom;
            return AddComponent(CoreComponentIds.GameplayCameraState, component);
        }

        public Entity ReplaceGameplayCameraState(float newTargetSpeed, float newCurrentZoom) {
            var component = CreateComponent<SeshFT.Gameplay.GameplayCameraStateComponent>(CoreComponentIds.GameplayCameraState);
            component.targetSpeed = newTargetSpeed;
            component.currentZoom = newCurrentZoom;
            ReplaceComponent(CoreComponentIds.GameplayCameraState, component);
            return this;
        }

        public Entity RemoveGameplayCameraState() {
            return RemoveComponent(CoreComponentIds.GameplayCameraState);
        }
    }
}

    public partial class CoreMatcher {
        static IMatcher _matcherGameplayCameraState;

        public static IMatcher GameplayCameraState {
            get {
                if (_matcherGameplayCameraState == null) {
                    var matcher = (Matcher)Matcher.AllOf(CoreComponentIds.GameplayCameraState);
                    matcher.componentNames = CoreComponentIds.componentNames;
                    _matcherGameplayCameraState = matcher;
                }

                return _matcherGameplayCameraState;
            }
        }
    }
